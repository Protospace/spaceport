# Spaceport secrets file, don't commit to version control!
#
# Note: all values are optional, features are excluded if left blank

# /admin/ route obfuscation
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 16
ADMIN_RANDOM = ''

# /ipn/ route obfuscation
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 16
IPN_RANDOM = ''

# Django secret key
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base64 | head -c 50
DJANGO_SECRET_KEY = ''
# Warning
# Keep this value secret.
# Running Django with a known SECRET_KEY defeats many of Djangoâ€™s security
# protections, and can lead to privilege escalation and remote code execution
# vulnerabilities.

# LDAP API url
# should contain the IP and port of the script and machine connected over VPN
# with trailing slash
LDAP_API_URL = ''

# LDAP API key
# should be equal to the auth token value set in
# spaceport/ldapserver/secrets.py
LDAP_API_KEY = ''

# Wiki Auth API url
# should contain the IP and port of the script and machine connected over VPN
# with trailing slash
WIKI_AUTH_API_URL = ''

# Discourse Auth API url
# should contain the IP and port of the script and machine connected over VPN
# with trailing slash
DISCOURSE_AUTH_API_URL = ''

# Auth API key
# should be equal to the auth token value set in
# spaceport/authserver/secrets.py
AUTH_API_KEY = ''

# Door cards API token
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 40
DOOR_API_TOKEN = ''

# Vending machine cards API token
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 40
VEND_API_TOKEN = ''

# Printer report API token
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 40
PRINTER_API_TOKEN = ''

# Pinball machine score API token
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 40
PINBALL_API_TOKEN = ''

# Alarm integration API token
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 40
ALARM_API_TOKEN = ''

# Spaceporter bot webhook URL token
# Posts to the "find a host" chat
# Found in /admin/plugins/chat URL section
# should look like '37f5e8d9c64064c86109b7ea'
SPACEPORTER_HOST_TOKEN = ''

# Protogram API token
# You can probably ignore this
PROTOGRAM_API_TOKEN = ''

# Vanguard hosting box API token
# Set this to random characters
# For example, use the output of this:
# head /dev/urandom | base32 | head -c 40
VANGUARD_API_TOKEN = ''

# protospace.ca mqtt broker password
MQTT_WRITER_PASSWORD = ''

# Protospace general info
DOOR_CODE = ''
WIFI_PASS = ''
GATE_CODE = ''
MINECRAFT = ''
MUMBLE = ''

# Portal Email Credentials
# For sending password resets, etc.
EMAIL_HOST = ''
EMAIL_USER = ''
EMAIL_PASS = ''

# Credentials for editing wiki
WIKI_ENDPOINT = ''
WIKI_USERNAME = ''
WIKI_PASSWORD = ''

# Credentials for Vikunja todo integration
# URL should end with trailing slash
# example: https://todo.protospace.ca/api/v1/
TODO_API_URL = ''
TODO_API_KEY = ''

# Backup API tokens
# These tokens allow each user to download a backup of member data.
# Don't mess up the data structure!
# Tokens must be random and unique, use the output of:
# head /dev/urandom | base32 | head -c 40
BACKUP_TOKENS = {
    '<token>': {
        'name': 'firstname.lastname',
        'backup_id': '<token>',
        'cache_key': '<token>',
    },
    '<token>': {
        'name': 'firstname.lastname',
        'backup_id': '<token>',
        'cache_key': '<token>',
    },
    '<token>': {  # reset the canaries for data-at-rest
        'name': 'null',
        'backup_id': '<token>',
        'cache_key': '<token>',
    },
}
